{
  "my editor log": {
    "prefix": "elog",
    "body": ["Editor.log(`$1: ${$1}`);"],
    "description": "快捷创建creator编辑器中的log"
  },

  "my property": {
    "prefix": "myproperty",
    "body": [
      "@property({",
      "type: $1,",
      "displayName: \"$2\",",
      "tooltip: \"\",",
      "})",
      "$3: $1 = $4;"
    ],
    "description": "快捷创建creator支持的属性"
  },

  "my property enum": {
    "prefix": "mypropertyenum",
    "body": [
      "@property({",
      "type: cc.Enum($1),",
      "displayName: \"$4\",",
      "tooltip: \"\",",
      "})",
      "$2: $1 = $1.$3;"
    ],
    "description": "快捷创建creator property支持的enum属性"
  },

  "my array": {
    "prefix": "myarr",
    "body": [
      "@property({",
      "type: [$1],",
      "displayName: \"$2\",",
      "tooltip: \"\",",
      "})",
      "$3: $1[] = [];"
    ],
    "description": "快捷创建数组"
  },

  "my integer": {
    "prefix": "myInteger",
    "body": [
      "@property({",
      "type: cc.Integer,",
      "displayName: \"$2\",",
      "tooltip: \"\",",
      "})",
      "$3: number = $4;"
    ],
    "description": "快捷创建整数"
  },

  "my sprite": {
    "prefix": "mysprite",
    "body": [
      "@property({",
      "type: cc.Sprite,",
      "displayName: \"\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Sprite = null;"
    ],
    "description": "快捷创建精灵"
  },

  "my node": {
    "prefix": "mynode",
    "body": [
      "@property({",
      "type: cc.Node,",
      "displayName: \"$2\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Node = null;"
    ],
    "description": "快捷创建节点"
  },

  "my label": {
    "prefix": "mylabel",
    "body": [
      "@property({",
      "type: cc.Label,",
      "displayName: \"\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Label = null;"
    ],
    "description": "快捷创建Label"
  },

  "my button": {
    "prefix": "mybutton",
    "body": [
      "@property({",
      "type: cc.Button,",
      "displayName: \"\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Button = null;"
    ],
    "description": "快捷创建Button"
  },

  "my component eventhandler": {
    "prefix": "mycomponenteventhandler",
    "body": [
      "@property({",
      "type: cc.Component.EventHandler,",
      "displayName: \"\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Component.EventHandler = null;"
    ],
    "description": "快捷创建组件的EventHandler"
  },

  "my component eventhandler arr": {
    "prefix": "mycomponenteventhandlerarr",
    "body": [
      "@property({",
      "type: [cc.Component.EventHandler],",
      "displayName: \"\",",
      "tooltip: \"\",",
      "})",
      "$1: cc.Component.EventHandler[] = [];"
    ],
    "description": "快捷创建组件的EventHandler数组"
  },

  "on touch Listener": {
    "prefix": "mytouchlisteneron",
    "body": [
      "$1.on(cc.Node.EventType.TOUCH_START, this.$2, this);",
      "$1.on(cc.Node.EventType.TOUCH_MOVE, this.$3, this);",
      "$1.on(cc.Node.EventType.TOUCH_END, this.$4, this);",
      "$1.on(cc.Node.EventType.TOUCH_CANCEL, this.$5, this);"
    ]
  },
  "off touch Listener": {
    "prefix": "mytouchlisteneroff",
    "body": [
      "$1.off(cc.Node.EventType.TOUCH_START, this.$2, this);",
      "$1.off(cc.Node.EventType.TOUCH_MOVE, this.$3, this);",
      "$1.off(cc.Node.EventType.TOUCH_END, this.$4, this);",
      "$1.off(cc.Node.EventType.TOUCH_CANCEL, this.$5, this);"
    ]
  },
  "get set property": {
    "prefix": "mygetset",
    "body": [
      "  @property",
      "  $1: $2 = $3;",
      "",
      "  @property({",
      "    displayName: \"$5\",",
      "    tooltip: \"$5\",",
      "    type: $6,",
      "  })",
      "  public get $4() {",
      "    return this.$1;",
      "  }",
      "",
      "  public set $4(value: $2) {",
      "    this.$1 = value;",
      "  }"
    ],
    "description": ""
  },
  "cocos creator sound": {
    "prefix": "myclip",
    "body": [
      "    @property({",
      "        type: cc.AudioClip,",
      "        displayName: '$1',",
      "        tooltip: '$2',",
      "    })",
      "    $3: cc.AudioClip = null;"
    ],
    "description": "cocos creator sound"
  },
  "StateInstance": {
    "prefix": "mystateinstance",
    "body": [
      "import { SidStateEvent } from '$2';",
      "import StateInstance from '$3';",
      "",
      "const { ccclass, property } = cc._decorator;",
      "",
      "@ccclass('$1')",
      "export default class $1 extends StateInstance {",
      "    // LIFE-CYCLE CALLBACKS:",
      "",
      "    onLoad() {",
      "        super.onLoad();",
      "    }",
      "",
      "    //   start() {}",
      "",
      "    // update (dt) {}",
      "",
      "    public onStateEvent(event: SidStateEvent, state: any, last: any) {}",
      "",
      "    public onStateReset(state: any, last: any) {}",
      "",
      "    public isAnswerEnable(): boolean {",
      "        return true;",
      "    }",
      "",
      "    public isAnswerCorrect(): boolean {",
      "        return true;",
      "    }",
      "",
      "    public onAnswerDisable() {}",
      "    public onAnswerResult(correct: boolean) {}",
      "}",
      ""
    ],
    "description": "StateInstance"
  },
  "mytest": {
    "prefix": "mytest",
    "body": ["${TM_FILENAME/(.*)\\..+$/$1/}"],
    "description": "mytest"
  }
}
